{"version":3,"sources":["webpack:///./src/app/pages/register-page/register-page.component.html","webpack:///./src/app/pages/register-page/register-page.component.scss","webpack:///./src/app/pages/register-page/register-page.component.ts","webpack:///./src/app/pages/register-page/register-page.module.ts","webpack:///./src/app/shared/services/register-service/register.service.ts"],"names":[],"mappings":"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","file":"pages-register-page-register-page-module.js","sourcesContent":["module.exports = \"<mat-grid-list cols=\\\"12\\\" rowHeight=\\\"60rem\\\">\\r\\n  <mat-grid-tile id=\\\"register-card\\\" class=\\\"credentials-card\\\"colspan=\\\"6\\\" rowspan=\\\"1\\\">\\r\\n    <mat-grid-tile-header>Register</mat-grid-tile-header>\\r\\n      <mat-form [formGroup]=\\\"userRegisterForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n        <div class=\\\"formGroup\\\">\\r\\n          <mat-form-field id=\\\"firstName\\\">\\r\\n            <input matInput placeholder=\\\"First Name\\\" type=\\\"text\\\" formControlName=\\\"firstName\\\" required\\r\\n              class=\\\"form-control\\\" [ngClass]=\\\" { 'is-invalid': submitted && f.firstName.errors}\\\" >\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div class=\\\"formGroup\\\">\\r\\n          <mat-form-field id=\\\"lastName\\\">\\r\\n            <input matInput placeholder=\\\"Last Name\\\" type=\\\"text\\\" formControlName=\\\"lastName\\\" required\\r\\n            class=\\\"form-control\\\" [ngClass]=\\\" { 'is-invalid': submitted && f.lastName.errors}\\\" >\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div class=\\\"formGroup\\\">\\r\\n          <mat-form-field id=\\\"age\\\">\\r\\n            <input matInput placeholder=\\\"Age\\\" type=\\\"text\\\" formControlName=\\\"age\\\" required\\r\\n            class=\\\"form-control\\\" [ngClass]=\\\" { 'is-invalid': submitted && f.age.errors}\\\" >\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div class=\\\"formGroup\\\">\\r\\n          <mat-form-field id=\\\"zip\\\">\\r\\n            <input matInput placeholder=\\\"ZIP Code\\\" type=\\\"text\\\" formControlName=\\\"zip\\\" required\\r\\n            class=\\\"form-control\\\" [ngClass]=\\\" { 'is-invalid': submitted && f.zip.errors}\\\">\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div class=\\\"formGroup\\\">\\r\\n          <mat-form-field id=\\\"email\\\">\\r\\n            <input matInput placeholder=\\\"E-mail Address\\\" type=\\\"text\\\" formControlName=\\\"email\\\" required\\r\\n            class=\\\"form-control\\\" [ngClass]=\\\" { 'is-invalid': submitted && f.email.errors}\\\">\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div class=\\\"formGroup\\\">\\r\\n          <mat-form-field id=\\\"password\\\">\\r\\n            <input matInput placeholder=\\\"Password\\\" [type]=\\\"hide ? 'text' : 'password'\\\" formControlName=\\\"password\\\" required\\r\\n            class=\\\"form-control\\\" [ngClass]=\\\" { 'is-invalid': submitted && f.password.errors}\\\">\\r\\n            <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div class=\\\"formGroup\\\">\\r\\n          <mat-form-field id=\\\"confirmPassword\\\">\\r\\n            <input matInput placeholder=\\\"Confirm Password\\\" [type]=\\\"hide ? 'text' : 'password'\\\" formControlName=\\\"confirmPassword\\\" required\\r\\n            class=\\\"form-control\\\" [ngClass]=\\\" { 'is-invalid': submitted && f.confirmPassword.errors}\\\" (keyup.enter)=\\\"onSubmit()\\\">\\r\\n            <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n      </mat-form>\\r\\n    <mat-grid-tile-footer>\\r\\n      <div class=\\\"buttons\\\">\\r\\n        <!--TODO align buttons better in the card-->\\r\\n        <button mat-raised-button (click)=\\\"goToLanding()\\\" class=\\\"cancel\\\">Cancel</button>\\r\\n        <button mat-raised-button (click)=\\\"onSubmit()\\\">Register</button>\\r\\n      </div>\\r\\n    </mat-grid-tile-footer>\\r\\n  </mat-grid-tile>\\r\\n</mat-grid-list>\\r\\n  \"","module.exports = \"#register-card {\\n  background: #31cc02; }\\n\\n.input {\\n  display: inline; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvcmVnaXN0ZXItcGFnZS9DOlxcVXNlcnNcXHZhaWRpXFxEZXNrdG9wXFx0ZXN0IHJlZ2lzdGVyIHVzZXJcXGtzdS1zd2UtNjczMy1nYW1pbmctbWF0Y2htYWtlclxcbWF0Y2htYWtlci11aS9zcmNcXGFwcFxccGFnZXNcXHJlZ2lzdGVyLXBhZ2VcXHJlZ2lzdGVyLXBhZ2UuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxtQkFBMEIsRUFBQTs7QUFHNUI7RUFDRSxlQUFlLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9yZWdpc3Rlci1wYWdlL3JlZ2lzdGVyLXBhZ2UuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIjcmVnaXN0ZXItY2FyZCAge1xyXG4gIGJhY2tncm91bmQ6cmdiKDQ5LCAyMDQsIDIpO1xyXG59XHJcblxyXG4uaW5wdXQge1xyXG4gIGRpc3BsYXk6IGlubGluZTtcclxufSJdfQ== */\"","import { Component, OnInit, Injector, Inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport { AppComponent } from '../../app.component';\r\nimport { MatDialog } from '@angular/material';\r\nimport { RegisterService } from '../../shared/services/register-service/register.service';\r\nimport { LoginService } from '../../shared/services/login-service/login.service';\r\nimport { HttpService } from '../../shared/services/http-service/http.service';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'register',\r\n  templateUrl: './register-page.component.html',\r\n  styleUrls: ['./register-page.component.scss']\r\n})\r\nexport class RegisterPage extends AppComponent implements OnInit {\r\n  userRegisterForm: FormGroup;\r\n  constructor(\r\n    protected router: Router,\r\n    protected location: Location,\r\n    protected injector: Injector,\r\n    protected dialog: MatDialog,\r\n    protected loginService: LoginService,\r\n    protected registerService: RegisterService,\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n    super(injector, dialog);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.userRegisterForm = this.formBuilder.group({\r\n      firstName: new FormControl('', [Validators.required]),\r\n      lastName: new FormControl('', [Validators.required]),\r\n      age: new FormControl('', [Validators.required]),\r\n      zip: new FormControl('', [Validators.required]),\r\n      email: new FormControl('', [Validators.required]),\r\n      password: new FormControl('', [Validators.required]),\r\n      confirmPassword: new FormControl('', [Validators.required])\r\n    });\r\n\r\n    }\r\n  get f() { return this.userRegisterForm.controls; }\r\n\r\n  onSubmit(): void {\r\n    if (this.userRegisterForm.invalid) {\r\n      this.registerService.handleError('Please fill in all required fields and try again');\r\n    } else {\r\n    this.showLoading();\r\n    this.registerService.register(\r\n      this.f.email.value,\r\n      this.f.firstName.value,\r\n      this.f.lastName.value,\r\n      this.f.age.value,\r\n      this.f.zip.value,\r\n      this.f.password.value,\r\n      this.f.confirmPassword.value).subscribe(data => {\r\n      if (data) {\r\n        if (data === 'Password Error') {\r\n          this.closeDialog();\r\n        } else if (data.detail.email === this.f.email.value) {\r\n          this.loginService.login(data.detail.email, this.f.password.value).subscribe(result => {\r\n            if (result) {\r\n              this.editProfile();\r\n            } else {\r\n                this.closeDialog();\r\n              }\r\n          });\r\n        }\r\n      } else {\r\n          this.closeDialog();\r\n      }\r\n    });\r\n  }\r\n}\r\n}\r\n","import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { RegisterPage } from './register-page.component';\r\nimport { LoginService } from 'src/app/shared/services/login-service/login.service';\r\nimport { RegisterService } from 'src/app/shared/services/register-service/register.service';\r\nimport { AppMaterialModule } from 'src/app/app-material.module';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    RegisterPage\r\n  ],\r\n  imports: [\r\n    AppMaterialModule,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: '',\r\n        component: RegisterPage\r\n      }\r\n    ])\r\n  ],\r\n  exports: [\r\n    RegisterPage\r\n  ],\r\n  providers: [\r\n    LoginService,\r\n    RegisterService\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class RegisterPageModule{}\r\n","import { Injectable } from '@angular/core';\r\nimport { User } from '../../models/user';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpService } from '../http-service/http.service';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport { LoginService } from '../login-service/login.service';\r\nimport { MatSnackBar } from '@angular/material';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegisterService extends HttpService {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    public snackBar: MatSnackBar,\r\n    ) {\r\n      super(http, snackBar);\r\n    }\r\n\r\n  public register(\r\n    email: string,\r\n    firstName: string,\r\n    lastName: string,\r\n    age: string,\r\n    zip: string,\r\n    password: string,\r\n    confirmPassword: string\r\n    ):  Observable<any>{\r\n\r\n      const userDetail = {\r\n        email: email,\r\n        first_name: firstName,\r\n        last_name: lastName,\r\n        age: age,\r\n        user_type: 2, // should register as a regular user\r\n        location: {\r\n          zip: zip\r\n        }\r\n      };\r\n      if (password !== confirmPassword) {\r\n        this.handleError('Passwords do not match');\r\n        return of('Password Error');\r\n      } else {\r\n        return this.http.post('/api/register', {userDetail, password},\r\n         this.httpOptions).pipe(map((resp: any) => {\r\n            if (resp) {\r\n              return resp;\r\n            }\r\n        })).pipe(catchError(err => this.handleError(err)));\r\n     }\r\n   }\r\n  }\r\n"],"sourceRoot":""}