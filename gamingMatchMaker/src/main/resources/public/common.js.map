{"version":3,"sources":["webpack:///./src/app/shared/services/login-service/login.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAyC;AACyC;AAC7C;AACI;AAEG;AACI;AACW;AAM3D;IAAkC,sEAAW;IAE3C,sBACY,IAAgB,EACnB,QAAqB;QAF9B,YAII,kBAAM,IAAI,EAAE,QAAQ,CAAC,SACtB;QAJS,UAAI,GAAJ,IAAI,CAAY;QACnB,cAAQ,GAAR,QAAQ,CAAa;;IAG5B,CAAC;IAEI,4BAAK,GAAZ,UAAa,KAAK,EAAE,QAAQ;QAA5B,iBA8BC;QA7BC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;YAC1C,KAAK;YACL,QAAQ;SACT,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,0DAAG,CAAC,UAAC,IAAS;YACtC,IAAI,IAAI,EAAE;gBACR,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,sDAAsD;oBACjF,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;oBACvC,KAAI,CAAC,QAAQ,GAAG,IAAI,iDAAI,CAAC;wBACvB,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE;wBAClB,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK;wBACxB,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU;wBACjC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS;wBAC/B,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG;wBACpB,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS;wBAC/B,IAAI,EAAE,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;qBAC/C,CAAC,CAAC;oBACH,YAAY,CAAC,OAAO,CAAC,cAAc,EAAE,KAAI,CAAC,SAAS,CAAC,CAAC;oBACrD,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC5D,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAI,CAAC,QAAQ,CAAC,CAAC;iBAC3C;qBAAM,EAAE,6CAA6C;oBAChD,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACrB,IAAM,GAAG,GAAG;wBACV,KAAK,EAAE,kBAAkB;qBAC1B,CAAC;oBACJ,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;iBACvB;aACF;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iEAAU,CAAC,aAAG,IAAI,YAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAArB,CAAqB,CAAC,CAAC,CAAC,CAAC,sBAAsB;IAC5E,CAAC;IAvCU,YAAY;QAHxB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAIkB,+DAAU;YACT,6DAAW;OAJnB,YAAY,CAwCxB;IAAD,mBAAC;CAAA,CAxCiC,sEAAW,GAwC5C;AAxCwB","file":"common.js","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { User } from '../../models/user';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { HttpService } from '../http-service/http.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService extends HttpService {\r\n\r\n  constructor(\r\n    protected http: HttpClient,\r\n    public snackBar: MatSnackBar,\r\n    ) {\r\n      super(http, snackBar);\r\n    }\r\n\r\n  public login(email, password): Observable<User> {\r\n    return this.http.post('/api/authorizeUser', {\r\n      email,\r\n      password\r\n    }, this.httpOptions).pipe(map((resp: any) => {\r\n      if (resp) {\r\n        if (resp.detail.is_active) { // If the user is active, store it as the current user\r\n          this.authToken = resp.auth.accessToken;\r\n          this.currUser = new User({\r\n            id: resp.detail.id,\r\n            email: resp.detail.email,\r\n            firstName: resp.detail.first_name,\r\n            lastName: resp.detail.last_name,\r\n            age: resp.detail.age,\r\n            isActive: resp.detail.is_active,\r\n            type: this.typeToString(resp.detail.user_type)\r\n          });\r\n          localStorage.setItem('access-token', this.authToken);\r\n          localStorage.setItem('user', JSON.stringify(this.currUser));\r\n          return Object.assign({}, this.currUser);\r\n      } else { // If the user is not active, return an error\r\n            this.currUser = null;\r\n            const err = {\r\n              error: 'inactive account'\r\n            };\r\n          this.handleError(err);\r\n        }\r\n      }\r\n      return null;\r\n    })).pipe(catchError(err => this.handleError(err))); // Catch server errors\r\n  }\r\n}\r\n"],"sourceRoot":""}